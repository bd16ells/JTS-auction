package com.example.auction.bid;

import com.example.auctionapp.domain.auction.Auction;
import com.example.auctionapp.domain.auction.AuctionService;
import com.example.auctionapp.domain.auction.bid.Bid;
import com.example.auctionapp.security.WebSecurityConfig;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.hamcrest.Matchers;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.core.io.Resource;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.hamcrest.Matchers.isEmptyOrNullString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
@Import(WebSecurityConfig.class)
@DirtiesContext
public class BidIntegrationTests {


    @Autowired
    ObjectMapper objectMapper;
    @Autowired
    private AuctionService auctionService;

    @Value("classpath:/json/createAuction.json")
    Resource createAuction;

    @Autowired
    private MockMvc mockMvc;

//    @Before
//    public void before() throws Exception{
//        setupAuction();
//    }


    @Test
    @WithMockUser
    public void integrationTest() throws Exception {
        mockMvc.perform(post("/auctions")
                .contentType(MediaType.APPLICATION_JSON)
                .content(new String(Files.readAllBytes(Paths.get(createAuction.getURI())))))
                .andDo(print())
                .andExpect(status().isCreated()) // 201
                .andExpect(jsonPath("$.id",     Matchers.is(1))) // this was actually auto-generated by db
                .andExpect(jsonPath("$.name",   Matchers.is("My Auction")))
                .andExpect(jsonPath("$.description",   Matchers.is("My First Auction")));



        // perform a get when there are no auctions
        // expect nothing to return
        mockMvc.perform(get("/auctions/1/bids"))
                .andDo(print())
                .andExpect(status().isNotFound());


        Bid bid1 = new Bid();
        bid1.setAmount(new BigDecimal("23.00"));

        mockMvc.perform(post("/auctions/1/bids")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(bid1)))
                .andDo(print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.amount", Matchers.is(23.00)))
                .andExpect(jsonPath("$.id", Matchers.is(1)));

        Bid bid2 = new Bid();
        bid2.setAmount(new BigDecimal("64.00"));

        mockMvc.perform(post("/auctions/1/bids")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(bid2)))
                .andDo(print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.amount", Matchers.is(64.00)))
                .andExpect(jsonPath("$.id", Matchers.is(2)));


        // doing find all
        mockMvc.perform(get("/auctions/1/bids"))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*].id", Matchers.contains(1, 2)))
                .andExpect(jsonPath("$", Matchers.hasSize(2)))
                .andExpect(jsonPath("$[*].amount", Matchers.contains(23.00, 64.00)));
//
        //perform an update

        bid1.setAmount(new BigDecimal("44.44"));
        mockMvc.perform(put("/auctions/1/bids/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(bid1)))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id", Matchers.is(1)))
                .andExpect(jsonPath("$.amount", Matchers.is(44.44)));

        // get new com.example.auction
//        mockMvc.perform(get("/auctions/bids/1"))
//                .andDo(print())
//                .andExpect(status().isOk())
//                .andExpect(jsonPath("$.id", Matchers.is(1)))
//                .andExpect(jsonPath("$", Matchers.hasSize(1)))
//                .andExpect(jsonPath("$.amount", Matchers.is(44.44)));

        // delete
        mockMvc.perform(delete("/auctions/1/bids/2"))
                .andDo(print())
                .andExpect(status().isNoContent()) // 204
                .andExpect(content().string(isEmptyOrNullString())); //HttpStatus.NO_CONTENT

        //add a new bid
        Bid bid3 = new Bid();
        bid2.setAmount(new BigDecimal("55.55"));
        mockMvc.perform(post("/auctions/1/bids"))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id", Matchers.is(3)))
                .andExpect(jsonPath("$.amount", Matchers.is(55.55)));

        //check everyting

                mockMvc.perform(get("/auctions/1/bids"))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[*].id", Matchers.contains(1, 3)))
                .andExpect(jsonPath("$", Matchers.hasSize(2)))
                .andExpect(jsonPath("$.amount", Matchers.contains(44.44, 55.55)));


    }

//    private void setupAuction() throws Exception {
//        // Create one auction just like auction integration test
//        mockMvc.perform(post("/auctions")
//                .contentType(MediaType.APPLICATION_JSON)
//                .content(new String(Files.readAllBytes(Paths.get(createAuction.getURI())))))
//                .andDo(print())
//                .andExpect(status().isCreated()) // 201
//                .andExpect(jsonPath("$.id",     Matchers.is(1))) // this was actually auto-generated by db
//                .andExpect(jsonPath("$.name",   Matchers.is("Ben's Auction")))
//                .andExpect(jsonPath("$.description",   Matchers.is("Used bike")));
//    }

}
